name: Deploy MERN Application to DEV server

on:
  push:
    branches:
      - 150-create-dev-server-on-aws

jobs:
  e2e-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      - name: Install Playwright
        run: npx playwright install --with-deps

      - name: Run Playwright tests
        run: |
          cd frontend
          npx playwright test --config=playwright.service.config.ts --workers=20
        env:
          PLAYWRIGHT_TEST_BASE_URL: http://${{ secrets.EC2_PUBLIC_IP_DEV }}

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: playwright-report
          path: frontend/playwright-report/
          retention-days: 30

      - name: Notify on failure
        if: failure()
        run: |
          echo "E2E tests failed. Please check the playwright report for details."

  build-and-push:
    needs: e2e-tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME_DEV }}
          password: ${{ secrets.DOCKER_PASSWORD_DEV }}
      
      - name: Build and push backend
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: martinstierlen/aws-dev-backend:latest
      
      - name: Build and push frontend
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: martinstierlen/aws-dev-frontend:latest
          build-args: |
            REACT_APP_API_URL=http://${{ secrets.EC2_PUBLIC_IP_DEV }}:3001

  deploy:
    needs: build-and-push
    runs-on: self-hosted
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME_DEV }}
          password: ${{ secrets.DOCKER_PASSWORD_DEV }}
      
      - name: Pull latest images
        run: |
          docker pull martinstierlen/aws-dev-backend:latest
          docker pull martinstierlen/aws-dev-frontend:latest
      
      - name: Debug information
        run: |
          echo "Current directory: $(pwd)"
          echo "Docker version: $(docker --version)"
          echo "Docker images:"
          docker images
          echo "Running containers:"
          docker ps -a
      
      - name: Stop and remove existing containers
        run: |
          docker stop nodejs-app-backend nodejs-app-frontend || true
          docker rm nodejs-app-backend nodejs-app-frontend || true
      
      - name: Create Docker network
        run: docker network create app-network || true
      
      - name: Run backend container
        run: |
          echo "Attempting to run backend container"
          docker run -d --name nodejs-app-backend \
            --network app-network \
            -p 3001:3001 \
            -e MONGO_URL='${{ secrets.MONGO_URL }}' \
            -e JWT_SECRET='${{ secrets.JWT_SECRET }}' \
            -e FRONTEND_URL='http://${{ secrets.EC2_PUBLIC_IP_DEV }}' \
            martinstierlen/aws-dev-backend:latest
          echo "Backend container started"
          docker ps
      
      - name: Run frontend container
        run: |
          echo "Attempting to run frontend container"
          docker run -d --name nodejs-app-frontend \
            --network app-network \
            -p 80:80 \
            martinstierlen/aws-dev-frontend:latest
          echo "Frontend container started"
          docker ps
      
      - name: Verify Nginx configuration
        run: docker exec nodejs-app-frontend nginx -t
      
      - name: Debug Containers
        run: |
          echo "Backend logs:"
          docker logs nodejs-app-backend
          echo "Frontend logs:"
          docker logs nodejs-app-frontend
          echo "Nginx configuration:"
          docker exec nodejs-app-frontend cat /etc/nginx/conf.d/default.conf
      
      - name: Cleanup old images
        run: docker image prune -af

      - name: Final deployment status
        run: |
          echo "Deployment completed"
          echo "Running containers:"
          docker ps
          echo "All images:"
          docker images
